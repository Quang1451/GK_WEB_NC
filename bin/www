#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket:server');
var socketio = require('socket.io')
var http = require('http');
var mongoose = require('mongoose');
var chat = require('../lib/Chat.js')

/**
 * Kết nối MongoDB.
 */
mongoose.connect('mongodb://127.0.0.1:27017/GK', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log("Kết nối MongoDB thành công!"))
  .catch((e) => console.log(e))

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/* Socket */
var io = socketio(server)

app.set('socketio', io);

let users = {}

io.on('connection', socket => {
  var email
  var currentRoom
  /* Lưu thông tin tài khoản mới online */
  socket.on('online', (data) => {
    /* Trả về danh sách các tài khoản hiện đăng online */
    io.emit('login', users)

    email = data.email
    const user = data.username
    if (!users[email])
      users[email] = user

    /* Trả về danh sách các tài khoản cho tất cả người dùng khác */
    socket.broadcast.emit('login', users)
  })

  /* Tham gia vào phòng chat */
  socket.on('room', (room) => {
    currentRoom = room
    socket.join(room)
  })

  /* Nhận message từ người gửi, lưu vào mongoDB rồi hiển thị cho người nhận (nếu đang online) */
  socket.on('chat', (data) => {
    chat.saveMessage(currentRoom,data.msg, data.user)
    io.in(currentRoom).emit('receiveMessage', {msg: data.msg, sender: data.user})
  })

  /* Trả về danh sách online mới cho các người dùng khác khi có người dùng disconnect */
  socket.on('disconnect', () => {
    delete users[email]
    socket.broadcast.emit('login', users)
  })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
